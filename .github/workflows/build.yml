name: Build Executables

on:
  push:
    tags:
      - 'v*'

# 添加权限配置
permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows build
          - os: windows-latest
            platform: windows
            arch: amd64
            output_name: file-server.exe
            asset_name: file-server-${{ github.ref_name }}-windows-amd64.exe
            
          # Linux build
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            output_name: file-server
            asset_name: file-server-${{ github.ref_name }}-linux-amd64

          # macOS build
          - os: macos-latest
            platform: darwin
            arch: amd64
            output_name: file-server
            asset_name: file-server-${{ github.ref_name }}-darwin-amd64

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Cache PDM dependencies
      uses: actions/cache@v3
      with:
        path: |
          .venv
          ~/.cache/pdm
          ~/.cache/pip
        key: ${{ runner.os }}-pdm-${{ hashFiles('pdm.lock') }}
        restore-keys: |
          ${{ runner.os }}-pdm-
        
    - name: Install PDM
      uses: pdm-project/setup-pdm@v3
      with:
        python-version: '3.11'
        version: 2.11.0
        enable-pep582: true

    - name: Install dependencies
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 15
        max_attempts: 3
        command: pdm install
        
    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
          # Clean dist directory
          rm -rf dist/* || true
          mkdir -p dist
            
          # Build
          pdm install
          pdm run pyinstaller file_server.spec --clean
            
          # Verify and rename
          ls -la dist/
          if [ -f "dist/file-server.exe" ]; then
            chmod +x "dist/file-server.exe"
            mv "dist/file-server.exe" "dist/${{ matrix.asset_name }}"
            echo "✓ Successfully built and renamed executable to ${{ matrix.asset_name }}"
            ls -la "dist/${{ matrix.asset_name }}"
          else
            echo "❌ Failed to find dist/file-server.exe"
            exit 1
          fi

    - name: Build executable (Unix-like)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 15
        max_attempts: 3
        command: |
          # Clean dist directory
          rm -rf dist/* || true
          mkdir -p dist
            
          # Build
          pdm install
          pdm run pyinstaller file_server.spec --clean
            
          # Verify and set permissions
          ls -la dist/
          if [ -f "dist/file-server" ]; then
            chmod +x "dist/file-server"
            mv "dist/file-server" "dist/${{ matrix.asset_name }}"
            chmod 755 "dist/${{ matrix.asset_name }}"
            echo "✓ Successfully built and renamed executable to ${{ matrix.asset_name }}"
            ls -la "dist/${{ matrix.asset_name }}"
          else
            echo "❌ Failed to find dist/file-server"
            exit 1
          fi

    - name: List dist directory
      run: |
        echo "=== Final dist directory contents ==="
        ls -la dist/
        echo "=== File details ==="
        if [ -f "dist/${{ matrix.asset_name }}" ]; then
          ls -la "dist/${{ matrix.asset_name }}"
        else
          echo "❌ Asset file not found!"
          exit 1
        fi
      shell: bash

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          dist/*
        fail_on_unmatched_files: true
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
